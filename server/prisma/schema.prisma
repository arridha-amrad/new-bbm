generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @unique @default(autoincrement())
  username        String            @unique
  email           String            @unique
  password        String
  imageURL        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  jwtVersion      String
  tokens          Token[]
  messages        Message[]
  participants    Participant[]
  lastSeen        LastSeen?
  messageReaders  MessageReader[]
  RefreshToken    RefreshToken[]
  ActiveToken     ActiveToken[]
  MessageReaction MessageReaction[]

  @@index([username, email])
  @@map("users")
}

model Token {
  id     String @id
  value  String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Chat {
  id           Int           @id @default(autoincrement())
  name         String?
  isGroup      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  messages     Message[]
  participants Participant[]

  @@map("chats")
}

model Message {
  id        Int               @id @default(autoincrement())
  content   String
  sentAt    DateTime          @default(now())
  chatId    Int
  userId    Int
  chat      Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  readers   MessageReader[]
  reactions MessageReaction[]

  @@map("messages")
}

model MessageReader {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  reader    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message_readers")
}

model MessageReaction {
  id        Int      @id @default(autoincrement())
  value     String
  unified   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId Int
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([unified, userId, messageId])
  @@index([messageId])
  @@map("message_reactions")
}

model Participant {
  id     Int  @id @default(autoincrement())
  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("participants")
}

model LastSeen {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  lastSeenAt DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("last_seen")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token, deviceId])
  @@map("refresh_tokens")
}

model ActiveToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jti       String   @unique
  deviceId  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([jti, deviceId])
  @@map("active_tokens")
}
