// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @unique @default(autoincrement())
  username       String          @unique
  email          String          @unique
  password       String
  imageURL       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tokens         Token[]
  messages       Message[]
  participants   Participant[]
  lastSeen       LastSeen[]
  messageReaders MessageReader[]

  @@index([username, email])
  @@map("users")
}

model Token {
  id     String @id
  value  String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Chat {
  id           Int           @id @default(autoincrement())
  name         String?
  createdAt    DateTime      @default(now())
  messages     Message[]
  participants Participant[]

  @@map("chats")
}

model Message {
  id      Int             @id @default(autoincrement())
  content String
  sentAt  DateTime        @default(now())
  chatId  Int
  userId  Int
  chat    Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  readers MessageReader[]

  @@map("messages")
}

model Participant {
  id     Int  @id @default(autoincrement())
  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("participants")
}

model MessageReader {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  reader    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message_readers")
}

model LastSeen {
  id         Int      @id @default(autoincrement())
  userId     Int
  lastSeenAt DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("last_seen")
}
